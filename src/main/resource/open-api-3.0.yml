openapi: 3.0.0
# Added by API Auto Mocking Plugin
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/igazl/simple-library/1.0.0
info:
  description: Simple Library project for EPAM L2+ training
  version: "1.0.0"
  title: Simple Library
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: mpeti.mpeti@gmail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
security:
  - cookieAuth:
    - read
    - write
tags:
- name: security
  description: Security components
- name: library
  description: Library manaegement
- name: book
  description: Book management for library
- name: user
  description: Operations about user
paths:
  /auth/login:
    post:
      summary: Log in the user
      operationId: loginUser
      security: []
      tags:
        - security
      responses:
        "200":
          description: User successfully logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      requestBody:
        description: User authentication required
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/LoginRequest"
  /auth/logout:
    post:
      summary: Log out the user
      operationId: logoutUser
      tags:
        - security
      responses:
        200:
          description: User successfully logged out
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /user:
    get:
      summary: Listing users
      operationId: getUserList
      tags:
        - user
      parameters:
        - in: query
          name: page
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: Limited amount of users are given back
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserListResponse'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /user/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
    get:
      summary: Get user details
      operationId: getUserDetails
      tags:
        - user
      responses:
        "200":
          description: User details successfully loaded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        "404":
          description: User details not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    post:
      summary: Create a new user
      operationId: createUser
      tags:
        - user
      responses:
        "200":
          description: User details successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        "403":
          description: Invalid client data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SaveErrorResponse"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    put:
      summary: Update a User
      operationId: updateUser
      tags:
        - book
      responses:
        "200":
          description: User successfully updated
        "403":
          description: Invalid client data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SaveErrorResponse"
        "404":
          description: Book details not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    patch:
      summary: Suspend user
      operationId: suspendUser
      tags:
        - user
      responses:
        "200":
          description: User successfully suspended
        "404":
          description: User details not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      summary: Detele user
      operationId: deleteUser
      tags:
        - user
      responses:
        "200":
          description: User successfully deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        "404":
          description: User details not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /book:
    get:
      summary: Listing books
      operationId: getBookList
      tags:
        - book
      parameters:
        - in: query
          name: page
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: Limited amount of books are given back
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookListResponse'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /book/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
    get:
      summary: Get book details
      operationId: getBookDetails
      tags:
        - book
      responses:
        "200":
          description: Book details successfully loaded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookResponse'
        "404":
          description: Book details not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    post:
      summary: Create a new book
      operationId: createBook
      tags:
        - book
      responses:
        "200":
          description: Book details successfully saved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookResponse'
        "403":
          description: Invalid client data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SaveErrorResponse"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    put:
      summary: Update a book
      operationId: updateBook
      tags:
        - book
      responses:
        "200":
          description: Book successfully updated
        "403":
          description: Invalid client data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SaveErrorResponse"
        "404":
          description: Book details not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      summary: Detele book
      operationId: deleteBook
      tags:
        - book
      responses:
        "200":
          description: Book successfully deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookResponse'
        "404":
          description: Book details not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: JSESSIONID
  schemas:
    UserListResponse:
      allOf:
        - $ref: '#/components/schemas/PaginatedResponse'
        - type: object
          required:
            - users
          properties:
            users:
              type: array
              items:
                $ref: '#/components/schemas/User'
    UserResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          required:
            - user
          properties:
            user:
              $ref: '#/components/schemas/User'
    User:
      required:
        - username
        - email
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
          description: Username of the user
        email:
          type: string
          description: User's email address
        type:
          type: string
          enum: ["reader", "librarian"]
          description: User's role
        status:
          type: string
          enum: ["active", "suspended", "deleted"]
          description: User's status
        name:
          type: string
          description: User's name
    BookListResponse:
      allOf:
        - $ref: '#/components/schemas/PaginatedResponse'
        - type: object
          required:
            - books
          properties:
            books:
              type: array
              items:
                $ref: '#/components/schemas/Book'
    BookResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          required:
            - book
          properties:
            book:
              $ref: '#/components/schemas/Book'
    Book:
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
          description: Title of the book
        summary:
          type: string
          description: Short summary for the book's content
        author:
          type: string
          description: Author of the book
        year:
          type: integer
          format: int64
        isbn:
          type: string
          description: Unique number for a given book
    SaveErrorResponse:
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
        - type: object
          required:
            - fields
          properties:
            fields:
              type: array
              items:
                $ref: '#/components/schemas/UserFieldError'
    UserFieldError:
      required:
        - fieldName
        - errorMessage
      properties:
        fieldName:
          type: string
        errorMessage:
          type: string
    LoginRequest:
      properties:
        username:
          type: string
        password:
          type: string
    ErrorResponse:
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    PaginatedResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            pagination:
              $ref: '#/components/schemas/Pagination'
    Pagination:
      properties:
        page:
          type: integer
          format: int64
          description: current page of the full list
        pages:
          type: integer
          format: int64
          description: the number of the pages
        limit:
          type: integer
          format: int64
          description: current limit
    ApiResponse:
      type: object
      required:
        - code
        - type
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string